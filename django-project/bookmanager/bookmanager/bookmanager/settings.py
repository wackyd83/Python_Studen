"""
Django settings for bookmanager project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os.path
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# __file__表示settings.py文件的文件名



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0!)xucfc*sy2g4kq3n8#ueoh(#+ti2-fae^nc9(sviifkvu1^w'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False
# 开发者进行调试用的.
# 项目上线部署时须改为False
DEBUG = True


# ALLOWED_HOSTS 允许以哪个主机的形式访问后端
# 默认是127.0.0.1
# 如果你改变了允许方式，需要将运行的IP/域名添加进来
# 改变后，需要把默认的127.0.0.1自己添加进来才可以再次访问
# 安全机制，只能已罗列的IP/域名进行访问
ALLOWED_HOSTS = ['test.wackyd.top','127.0.0.1']


# Application definition
# 安装/注册子应用
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'book',  #  注册应用的方式一
    # 'book.apps.BookConfig' # 注册应用的方式二
    'login.apps.LoginConfig',  #  注册应用的方式二，login.apps.LoginConfig = login
    # 通常使用方式二
    # '''
    # 注册应用可采用的方式为：
    # 1.'子应用名'
    # 2.'子应用名.apps.子应用名Config'
    # '''
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

#ROOT_URLCONF 是我么工程的url的配置入口
#默认是 工程名.urls
#可以修改，但一般情况下不必修改
ROOT_URLCONF = 'bookmanager.urls'

# 和模板相关的配置信息
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # dirs 设置模板路径
        'DIRS': [os.path.join(BASE_DIR,'template')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookmanager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# sqlite主要是一个嵌入式的关系型数据库
# 主要是在移动端使用
# sqlite属于小型的关系型数据库

# 中型的数据库：mysql（甲骨文） sqlserver（微软的）
# 大型的数据库：Oracle，DB2
DATABASES = {
    'default': {
        # engine 引擎

        # 使用sqlite的配置
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'bookmanager.sqlite3',

        # 使用mysql的配置
        'ENGINE': 'django.db.backends.mysql',
        'HOST':'www.wackyd.top',
        'PORT':'9985',
        'USER':'root',
        'PASSWORD':'Aa19831220.',
        'NAME': 'bookmanager',  # 指定使用的数据库名

    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-Hans'
#设置页面默认语言

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'
#时区改为上海

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
# django是如何区分静态资源和动态资源了？
# 就是通过STATIC_URL
# 我们在访问静态资源 http://ip:port+STATIC_URL+文件名
# django就会认为我们在访问静态资源，这个是否会去静态资源文件夹中进行匹配

# 告知系统静态文件的存放路径
STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
